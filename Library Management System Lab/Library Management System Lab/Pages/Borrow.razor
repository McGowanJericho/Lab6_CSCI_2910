@page "/borrow"
@using Library_Management_System_Lab.Data.models
@using Library_Management_System_Lab.Services;
@inject Library_Management_System_Lab.Services.BookService BookService
@inject Library_Management_System_Lab.Services.UserService UserService
@inject Library_Management_System_Lab.Services.BorrowedBookService BorrowedBookService

<h3>Borrow Book</h3>

<p>Enter Book ID and User ID to borrow a book:</p>

<div>
    <label for="bookId">Book ID:</label>
    <input id="bookId" @bind="bookId" />
</div>

<div>
    <label for="userId">User ID:</label>
    <input id="userId" @bind="userId" />
</div>

<button @onclick="BorrowBook">Borrow Book</button>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color: red;">@errorMessage</p>
}

<h3>Borrowed Book List</h3>

@if (BorrowedBookService.GetBorrowedBookList().Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Book ID</th>
                <th>Title</th>
                <th>Author</th>
                <th>ISBN</th>
                <th>Borrower UserID</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var book in BorrowedBookService.GetBorrowedBookList())
            {
                <tr>
                    <td>@book.Id</td>
                    <td>@book.Title</td>
                    <td>@book.Author</td>
                    <td>@book.ISBN</td>
                    <td>@book.UserID</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No borrowed books available.</p>
}

<h3>Book List</h3>

@if (BookService.GetBookList().Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Title</th>
                <th>Author</th>
                <th>ISBN</th>
                <th>Available</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var book in BookService.GetBookList())
            {
                <tr>
                    <td>@book.Id</td>
                    <td>@book.Title</td>
                    <td>@book.Author</td>
                    <td>@book.ISBN</td>
                    <td>@book.IsAvailable</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No books available.</p>
}

<h3>User List</h3>

@if (UserService.GetUserList().Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Email</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in UserService.GetUserList())
            {
                <tr>
                    <td>@user.Id</td>
                    <td>@user.Name</td>
                    <td>@user.Email</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No users available.</p>
}

@code {
    private int bookId;
    private int userId;
    private string errorMessage;

    private void BorrowBook()
    {
        // Validate if book ID and user ID are valid integers
        if (!int.TryParse(bookId.ToString(), out _) || !int.TryParse(userId.ToString(), out _))
        {
            errorMessage = "Invalid Book ID or User ID."; //Throw error if either of the parses fail
            return;
        }

        var bookToBorrow = BookService.GetBookList().FirstOrDefault(b => b.Id == bookId); //Return first instance of a book where the bookId's equal

        if (bookToBorrow != null && bookToBorrow.IsAvailable) //Only run if the bookToBorrow exists and is available to rent
        {
            BorrowedBook newBorrowBook = new BorrowedBook()
                {
                    Title = bookToBorrow.Title,
                    Author = bookToBorrow.Author,
                    ISBN = bookToBorrow.ISBN,
                    UserID = userId,
                    IsAvailable = false
                };
            BorrowedBookService.AddBorrowBook(newBorrowBook);

            // Update the book's availability in the BookService
            bookToBorrow.IsAvailable = false;
            BookService.UpdateBook(bookToBorrow);
            bookToBorrow = new Book(); //Reset book
            newBorrowBook = new BorrowedBook(); //Reset Borrow Book


            errorMessage = string.Empty; //Reset error message if successful
        }
        else //Throw error message if fails
        {
            errorMessage = "Invalid Book ID or Book is not available for borrowing.";
        }
    }
}
